/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param T1: The roots of binary tree T1.
     * @param T2: The roots of binary tree T2.
     * @return: True if T2 is a subtree of T1, or false.
     */
    bool R=false;
     
    bool same (TreeNode*  T1, TreeNode *  T2){
        if (!T1&&!T2) return true;
        if (T1->left&&!T2->left||!T1->left&&T2->left||T1->right&&!T2->right||!T1->right&&T2->right) return false;
        if (T1->val!=T2->val) return false;
        if ((T1->left==NULL)&&(T1->right==NULL)&&(T2->left==NULL)&&(T2->right==NULL)) return true;
        return same(T1->left,T2->left)&&same(T1->right,T2->right);
    }
    
    void helper(TreeNode* T1, TreeNode* T2){
        if (!T1) return;
        if (same(T1,T2)) {
            R=true;
            return;
        }
        helper(T1->left,T2);
        helper(T1->right,T2);
    }
    bool isSubtree(TreeNode * T1, TreeNode * T2) {
        // write your code here
        if (!T2) return true;
        helper(T1,T2);
        return R;
        
    }
};
