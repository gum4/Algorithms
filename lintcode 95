/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: True if the binary tree is BST, or false
     */
    bool res=true;
    //返回一棵树最大值和最小值，V[0]存储最大值
    vector<int> helper (TreeNode * root){
        //没有子节点，最大值和最小值都是它本身
        vector<int> v;
        //if (!root) return v;
        if (!root->left&&!root->right) return vector<int>(2,root->val);
        vector<int> l,r;
        int Max,Min;
        if (root->left&&root->right){
            l=helper(root->left);
            r=helper(root->right);
            Max=max(max(l[0],root->val),r[0]);
            Min=min(min(l[1],root->val),r[1]);
            if (!(r[1]>root->val&&root->val>l[0])){
                res=false;
            }
        }
        else if (root->left){
            l=helper(root->left);
            Max=max(l[0],root->val);
            Min=min(l[1],root->val);
            if (l[0]>=root->val) res=false;
        }
        else{
            r=helper(root->right);
            Max=max(r[0],root->val);
            Min=min(r[1],root->val);
            if (r[1]<=root->val) res=false;
        }
        v.push_back(Max);
        v.push_back(Min);
        return v;
        
    }
    bool isValidBST(TreeNode * root) {
        // write your code here
        if (!root) return true;
        vector<int> v=helper(root);
        return res;
    }
};



// java edition 

public class Solution {
  public boolean isBST(TreeNode root) {
    return isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
  }

  private boolean isBST(TreeNode root, int min, int max){
     if(root == null){
       return true;
     }
     if(root.key <= min || root.key >= max){
       return false;
     }
     return isBST(root.right, root.key, max) && isBST(root.left, min, root.key);
  }
}
