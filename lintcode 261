class Solution {
public:
    /**
     * @param matrix: the matrix for calculation.
     * @return: return the max area after operation at most once.
     */
     
     
     void helper (vector<vector<string>> &M , string c, int i, int j,int &count){
         M[i][j]=c;
         count++;
         //递归时候不加return，子情况跳出之后会继续执行下面的语句
         if (i+1<M.size()){
             if (M[i+1][j]=="1"){
                 helper(M,c,i+1,j,count);
             }
         }
         if (i-1>=0){
             if (M[i-1][j]=="1"){
                 helper(M,c,i-1,j,count);
             }
         }
         if (j+1<M[0].size()){
             if (M[i][j+1]=="1"){
                 helper(M,c,i,j+1,count);
             }
         }
         if (j-1>=0){
             if (M[i][j-1]=="1"){
                 helper(M,c,i,j-1,count);
             }
         }

     }
    int maxArea(vector<vector<int>> &matrix) {
        // write your code here.
        int m=matrix.size();
        int n=matrix[0].size();
        vector<vector<string>> M(m,vector<string> (n,""));
        for (int i=0;i<m;i++){
            for (int j=0;j<n;j++){
                M[i][j]=matrix[i][j]==1?"1":"0";
            }
        }
        
        unordered_map<string, int> MAP;
        unordered_map<string, int>::iterator itr;
        int index=1;
        for (int i=0;i<m;i++){
            for (int j=0;j<n;j++){
                
                if (M[i][j]=="1"){
                    string S="#"+to_string(index);
                    int I=0;
                    helper(M,S,i,j,I);
                    MAP[S]=I;
                    index++;
                }
            }
        }
        int MAX=0;
        for (int i=0;i<m;i++){
            for (int j=0;j<n;j++){
                if (M[i][j]=="0"){
                    int tmp=0;
                    unordered_set<string> Set;
                    if (i-1>=0&&M[i-1][j]!="0"){
                        Set.insert(M[i-1][j]);
                    }
                    if (i+1<m&&M[i+1][j]!="0"){
                        Set.insert(M[i+1][j]);
                    }
                    if (j-1>=0&&M[i][j-1]!="0"){
                        Set.insert(M[i][j-1]);
                    }
                    if (j+1<n&&M[i][j+1]!="0"){
                        Set.insert(M[i][j+1]);
                    }
                    for (unordered_set<string>::iterator ITR=Set.begin();ITR!=Set.end();ITR++){
                        itr=MAP.find(*ITR);
                        tmp+=itr->second;
                    }
                    MAX=max(MAX,1+tmp);
                }
                else{
                    itr=MAP.find(M[i][j]);
                    MAX=max(MAX,itr->second);
                }
            }
            
        }
        return MAX;
    }
};
