class Solution {
public:
    /**
     * @param sweetness: an integer array
     * @param K: an integer
     * @return:  return the maximum total sweetness of the piece
     */
    int maximizeSweetness(vector<int> &sweetness, int K) {
        // write your code here
        int n=sweetness.size();
        
        vector<int> sum(n,0);
        sum[0]=sweetness[0];
        for (int i=1;i<n;i++){
            sum[i]=sum[i-1]+sweetness[i];
        }
        //从第i个位置（包括第i个位置）往后选j个的最小值的最大值
        vector<vector<int>> res(n,vector<int> (K+1,0));
        res[0][0]=sum[n-1];
        //所有选1个的情况
        for (int i=1;i<n;i++){
            res[i][0]=sum[n-1]-sum[i-1];
        }
        for (int i=n-1;i>=0;--i){
            int tmp=i-1>=0?sum[i-1]:0;
            for (int j=1;j<=min(n-i,K);j++){
                for (int k=i+1;k<=n-j;k++){
                    
                    res[i][j]=max(res[i][j],min(sum[k-1]-tmp,res[k][j-1]));
                }    
            }
        }
        // for (int i=0;i<n;i++){
        //     for (int j=0;j<K;j++){
        //         cout<<res[i][j]<<" ";
        //     }
        //     cout<<endl;
        // }
        return res[0][K];
    }
};
