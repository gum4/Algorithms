class Solution {
public:
    /**
     * @param s1: A string
     * @param s2: Another string
     * @return: whether s2 is a scrambled string of s1
     */
     
    bool helper(string & s1, string & s2){
        if (s1.length()!=s2.length()) return false;
        // if (s1.length()==1){
        //     if (s1==s2) return true;
        //     return false;
        // }
        if (s1==s2) return true;
        string str1 = s1, str2 = s2;
        sort(str1.begin(), str1.end());
        sort(str2.begin(), str2.end());
        if (str1 != str2) return false;
        for (unsigned int i=0;i<s1.length()-1;++i){
            //great rgtae i=0
            //l1: g;  l4: reat
            //r1: r; r2: e; r3: rgta; r4: gtae
            string l1=s1.substr(0,i+1);
            string r1=s2.substr(0,i+1);
            
            string l4=s1.substr(i+1/*,s1.length()-1-i*/);
            string r4=s2.substr(i+1/*,s2.length()-1-i*/);
            
            if (helper(l1,r1)&&helper(l4,r4)) return true;
            //string l2=s1.substr(s1.length()-1-i,i+1);
            string r2=s2.substr(s2.length()-1-i/*,i+1*/);
            //string l3=s1.substr(0,s1.length()-1-i);
            string r3=s2.substr(0,s2.length()-1-i);
            if (helper(l1,r2)&&helper(l4,r3)) return true;
        }
        return false;
    }
  
    bool isScramble(string &s1, string &s2) {
        // write your code here
        //只能连续的字符组合先交换位置，再对每个大字符串的子字符串进行交换
        return helper(s1,s2);
    }
};
