class Solution {
public:
    /**
     * @param L: Given n pieces of wood with length L[i]
     * @param k: An integer
     * @return: The maximum length of the small pieces
     */
    int helper(vector<int> L,int target){
        int num=0;
        for (int i=0;i<L.size();i++){
            num+=L[i]/target;
        }
        return num;
    }
    int woodCut(vector<int> &L, int k) {
        // write your code here
        if (L.size()==0) return 0;
        sort(L.begin(),L.end());
        int len=L.size();
        long left=L[len-1]/k;
        long right=L[len-1];
        long mid;
        vector<long> res;
        while (left<right){
            mid=(left+right)/2;
            if (mid<=0) break;
            cout<<mid<<endl;
            int tmp=helper(L,mid);
            if (tmp>=k){
                left=mid+1;
                res.push_back(mid);
            }
            else{
                right=mid;
            }
        }
        if (res.size()==0) return 0;
        sort(res.begin(),res.end());
        
        return (int)res[res.size()-1];
    }
};
