class Solution {
public:
    /**
     * @param nums: A list of integers
     * @param k: An integer denote to find k non-overlapping subarrays
     * @return: An integer denote the sum of max k non-overlapping subarrays
     */
    int maxSubArray(vector<int> &nums, int k) {
        // write your code here
        if(nums.size() < k){
            return 0;
        }

        int len = nums.size();

        vector<vector<int>> localMax (len+1, vector<int> (k+1,0));
        vector<vector<int>> globalMax (len+1, vector<int> (k+1,0));

        for(int j = 1; j <= k; j++){

            localMax[j - 1][j] = INT_MIN;;
            for(int i = j; i <= len; i++){
                localMax[i][j] = max(globalMax[i - 1][j - 1], localMax[i - 1][j]) + nums[i - 1];
                if(i == j){
                    globalMax[i][j] = localMax[i][j];
                }else{
                    globalMax[i][j] = max(globalMax[i - 1][j], localMax[i][j]);
                }
            }
        }

        return globalMax[len][k];
    }
};
