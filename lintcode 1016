class Solution {
public:
    /**
     * @param A: an array
     * @param B: an array
     * @return: the minimum number of swaps to make both sequences strictly increasing
     */
    int minSwap(vector<int> &A, vector<int> &B) {
        // Write your code here
        if (A.empty()) return 0;
        int N=A.size();
        vector<pair<int,int>> res(N,{-1,-1});
        //first:这次不换的最小步数
        //second：这次换的最小步数
        res[0]={0,1};
        for (int i=1;i<N;++i){
            //前一个必须换
            if (res[i-1].first==-1){
                int l=(A[i-1]<B[i]&&B[i-1]<A[i])?res[i-1].second:-1;
                int r=(A[i-1]<A[i]&&B[i-1]<B[i])?(res[i-1].second+1):-1;
                res[i]={l,r};
            }
            else if (res[i-1].second==-1){
                int l=(A[i-1]<A[i]&&B[i-1]<B[i])?res[i-1].first:-1;
                int r=(A[i-1]<B[i]&&B[i-1]<A[i])?(res[i-1].first+1):-1;
                res[i]={l,r};
            }
            else{
                int l,r;
                int l1=(A[i-1]<A[i]&&B[i-1]<B[i])?res[i-1].first:-1;
                int l2=(A[i-1]<B[i]&&B[i-1]<A[i])?res[i-1].second:-1;
                int r1=(A[i-1]<B[i]&&B[i-1]<A[i])?(res[i-1].first+1):-1;
                int r2=(A[i-1]<A[i]&&B[i-1]<B[i])?(res[i-1].second+1):-1;
                if (l1==-1&&l2==-1) l=-1;
                else if (l1==-1&&l2>=0) l=l2;
                else if (l1>=0&&l2==-1) l=l1;
                else l=min(l1,l2);
                if (r1==-1&&r2==-1) r=-1;
                else if (r1==-1&&r2>=0) r=r2;
                else if (r1>=0&&r2==-1) r=r1;
                else r=min(r1,r2);
                res[i]={l,r};
            }
        }
        if (res[N-1].first==-1) return res[N-1].second;
        else if (res[N-1].second==-1) return res[N-1].first;
        return min(res[N-1].first,res[N-1].second);
    }
};
