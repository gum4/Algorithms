class Solution {
public:
    /**
     * @param maze: the maze
     * @param start: the start
     * @param destination: the destination
     * @return: whether the ball could stop at the destination
     */
     
    vector<vector<int>> nextLoc(vector<vector<int>> &maze, vector<int> &ball){
        vector<vector<int>> Res;
        vector<int> tmp, tmp1,tmp2,tmp3;
        int i=1;
        //up
        if (ball[0]-1>=0&&maze[ball[0]-1][ball[1]]!=1){
            //如果可以往上走
            while(ball[0]-i>=0&&maze[ball[0]-i][ball[1]]!=1) {
                i++;
            }
            tmp.push_back(ball[0]-(i-1));
            tmp.push_back(ball[1]);
        }
        else{
            tmp.push_back(-1);
            tmp.push_back(-1);
        }
        i=1;
        //left
        if (ball[1]-1>=0&&maze[ball[0]][ball[1]-1]!=1){
            //如果可以往左走
            while(ball[1]-i>=0&&maze[ball[0]][ball[1]-i]!=1) {
                //i++抵消后面的i--
                i++;
            }
            tmp1.push_back(ball[0]);
            tmp1.push_back(ball[1]-(i-1));
            
        }
        else{
            tmp1.push_back(-1);
            tmp1.push_back(-1);
        }
        i=1;
        //down
        if (ball[0]+1<maze.size()&&maze[ball[0]+1][ball[1]]!=1){
            //如果可以往下走
            while(ball[0]+i<maze.size()&&maze[ball[0]+i][ball[1]]!=1) {
                i++;
            }
            tmp2.push_back(ball[0]+(i-1));
            tmp2.push_back(ball[1]);
        }
        else{
            tmp2.push_back(-1);
            tmp2.push_back(-1);
        }
        i=1;
        //right
        if (ball[1]+1<maze[0].size()&&maze[ball[0]][ball[1]+1]!=1){
            //如果可以往右走
            while(ball[1]+i<maze[0].size()&&maze[ball[0]][ball[1]+i]!=1) {
                i++;
            }
            tmp3.push_back(ball[0]);
            tmp3.push_back(ball[1]+(i-1));
        }
        else{
            tmp3.push_back(-1);
            tmp3.push_back(-1);
        }
        Res.push_back(tmp);
        Res.push_back(tmp1);
        Res.push_back(tmp2);
        Res.push_back(tmp3);
        return Res;
    }
    
    bool helper(vector<vector<int>> &maze, vector<int> &start, vector<int> &destination/*,int & dir*/){
        if (start==destination) {
            return true;
        }
        //cout<<"###"<<start[0]<<" "<<start[1]<<"###"<<endl;
        
        vector<vector<int>> V= nextLoc(maze,start);
        // bool b=false;
        // for (int i=0;i<V.size();i++){
        //     if (V[i][0]!=-1||V[i][1]!=-1){
        //         b=true;
        //         break;
        //     }
        // }
        // if (!b) return false;
        // cout<<V[0][0]<<" "<<V[0][1]<<endl;
        // cout<<V[1][0]<<" "<<V[1][1]<<endl;
        // cout<<V[2][0]<<" "<<V[2][1]<<endl;
        // cout<<V[3][0]<<" "<<V[3][1]<<endl;
        for (int i=0;i<4;i++){
            if ((V[i][0]==-1&&V[i][1]==-1)||maze[V[i][0]][V[i][1]]==-1) continue;
            //if ((i==0&&dir==2)||(i==1&&dir==3)||(i==2&&dir==0)||(i==3&&dir==1)) continue;
            // int tmp_dir=dir;
            // dir=i;
            maze[V[i][0]][V[i][1]]=-1;
            if(helper(maze,V[i],destination/*,dir*/)) return true;
            maze[V[i][0]][V[i][1]]=0;
            //dir=tmp_dir;
        }
        return false;
    }
    bool hasPath(vector<vector<int>> &maze, vector<int> &start, vector<int> &destination) {
        // write your code here
        // vector<vector<int>> V= nextLoc(maze,start);
        // cout<<V[0][0]<<" "<<V[0][1]<<endl;
        // cout<<V[1][0]<<" "<<V[1][1]<<endl;
        // cout<<V[2][0]<<" "<<V[2][1]<<endl;
        // cout<<V[3][0]<<" "<<V[3][1]<<endl;
        //int dir=-1;
        for (unsigned int i=0;i<maze.size();i++){
            for (unsigned int j=0;j<maze[i].size();j++){
                cout<<maze[i][j]<<" ";
            }
            cout<<endl;
        }
        bool res= helper(maze,start,destination/*,dir*/);
        for (unsigned int i=0;i<maze.size();i++){
            for (unsigned int j=0;j<maze[i].size();j++){
                cout<<maze[i][j]<<" ";
            }
            cout<<endl;
        }
        return res;
    }
};
