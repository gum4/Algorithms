class Solution {
public:
    /**
     * @param graph: a 2D array
     * @return: all possible paths from node 0 to node N-1
     */
    void helper(vector<vector<int>> &graph,vector<vector<int>>& V, vector<int>& v, int cur, int target,unordered_set<int>& visited){
        // for (auto A:v){
        //     cout<<A<<" ";
        // }
        // cout<<endl;
        if (cur==target){
            V.push_back(v);
            return;
        }
        for (size_t i=0;i<graph[cur].size();++i){
            int tmp=graph[cur][i];
            if (visited.count(tmp)) continue;
            visited.insert(tmp);
            v.push_back(tmp);
            helper(graph,V,v,tmp,target,visited);
            v.pop_back();
            visited.erase(tmp);
        }
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>> &graph) {
        // Write your code here
        int N=graph.size();
        unordered_set<int> visited;
        vector<vector<int>> V;
        vector<int> v(1,0);
        visited.insert(0);
        helper(graph,V,v,0,N-1,visited);
        return V;
    }
};
