class Solution {
public:
    /*
     * @param envelopes: a number of envelopes with widths and heights
     * @return: the maximum number of envelopes
     */
     bool good(pair<int,int> p1, pair<int,int> p2){
         return (p1.first<p2.first)&&(p1.second<p2.second);
     }
    int maxEnvelopes(vector<pair<int, int>>& envelopes) {
        // write your code here
        //M存储一定包含某个pair的最长链中的最小pair和最大pair
        vector<vector<pair<int,int> > > M;
        //V存储一定包含某个pair的最长链长度
        //M[i][0]为最小
        vector<int> V;
        for (unsigned int i=0;i<envelopes.size();i++){
            vector<pair<int,int>> tmp;
            tmp.push_back(envelopes[i]);
            tmp.push_back(envelopes[i]);
            M.push_back(tmp);
            V.push_back(1);
        }
        int Res=0;
        int index=1;
        //cout<<good(envelopes[0],envelopes[1])<<endl;
        while (index<envelopes.size()){
            int loc=-1;
            int tmp_max=1;
            for (int i=0;i<index;i++){
                
                // envelopes[index]被包含在第i个的链的中间
                if (good(envelopes[index],M[i][1])&&good(M[i][0],envelopes[index])){
                    if (V[i]>tmp_max){
                        tmp_max=V[i];
                        loc=i;
                    }
                }
                // envelopes[index]被包含在第i个的链的左边（小）
                else if (good(envelopes[index],M[i][0])){
                    if (V[i]+1>tmp_max){
                        tmp_max=V[i]+1;
                        loc=i;
                    }
                }
                // envelopes[index]被包含在第i个的链的右边（大）
                else if (good(M[i][1],envelopes[index])){
                    if (V[i]+1>tmp_max){
                        tmp_max=V[i]+1;
                        loc=i;
                    }
                }
            }
            cout<<loc<<" "<<tmp_max<<endl;
            //cout<<"("<<p1.first<<" "<<p1.second<<") ("<<p2.first<<" "<<p2.second<<")"<<endl;
            if (loc!=-1){
                if (good(envelopes[index],M[loc][1])&&good(M[loc][0],envelopes[index])){
                    M[index][0]=M[loc][0];
                    M[index][1]=M[loc][1];
                }
                else if (good(envelopes[index],M[loc][0])){
                    M[index][0]=envelopes[index];
                    M[index][1]=M[loc][1];
                }
                else if (good(M[loc][1],envelopes[index])){
                    M[index][0]=M[loc][0];
                    M[index][1]=envelopes[index];
                }
            }
            V[index]=tmp_max;
            Res=max(Res,tmp_max);
            index++;
            
        }
        for (unsigned int i=0;i<M.size();i++)
        cout<<"("<<M[i][0].first<<" "<<M[i][0].second<<") ("<<M[i][1].first<<" "<<M[i][1].second<<") : "<<V[i]<<endl;
        return Res;
    }
};
