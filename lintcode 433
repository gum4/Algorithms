class Solution {
public:
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */
    bool within(int m, int n, int i, int j){
        return 0<=i&&i<m&&0<=j&&j<n;
    }
    void helper(vector<vector<bool>> &grid, int  i, int j){
        //if (grid[i][j]==true) return;
        grid[i][j]=false;
        if (within(grid.size(),grid[0].size(),i+1,j)){
            if (grid[i+1][j]==true)
            helper(grid,i+1,j);
        }
        if (within(grid.size(),grid[0].size(),i-1,j)){
            if (grid[i-1][j]==true)
            helper(grid,i-1,j);
        }
        if (within(grid.size(),grid[0].size(),i,j-1)){
            if (grid[i][j-1]==true)
            helper(grid,i,j-1);
        }
        if (within(grid.size(),grid[0].size(),i,j+1)){
            if (grid[i][j+1]==true)
            helper(grid,i,j+1);
        }
    }
    int numIslands(vector<vector<bool>> &grid) {
        // write your code here
        int sum=0;
        for (unsigned int i=0;i<grid.size();i++){
            for (unsigned int j=0;j<grid[i].size();j++){
                if (grid[i][j]==true){
                    helper(grid,i,j);
                    sum++;
                }
            }
        }
        return sum;
    }
};l
