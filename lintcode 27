class Solution {
public:
    /**
     * @param n: the length of the string.
     * @param k: the kth Lexicographically smallest that result should be.
     * @return: return the kth Lexicographically smallest string.
     */
     //算个数，每一次往后乘3，再乘2/3
    string kthString(int n, long long k) {
        if (k>3*pow(2,n-1)) return "";
        // write your code here.
        //use_full 判断第一位是不是三个元素
        bool use_full=false;
        if (k>pow(2,n-1)) use_full=true;
        vector<int> stor;
        if (use_full){
            int first=k/pow(2,n-1);
            if(k-first*pow(2,n-1)==0) stor.push_back(first);
            else stor.push_back(first+1);
            long long item=k-first*pow(2,n-1);
            int digit=n-2;
            while (item>0){
                int f=item/pow(2,digit);
                item-=f*pow(2,digit);
                if (item==0) stor.push_back(f);
                else stor.push_back(f+1);
                digit--;
            }
            for (unsigned int i=0;i<digit+1;i++){
                stor.push_back(2);
            }
            for (unsigned int i=0;i<stor.size();i++){
                cout<<stor[i]<<" ";
            }
            cout<<endl;
        }
        else{
            int item=k;
            int digit=log2(item);
            for (unsigned int i=0;i<n-digit-1;i++){
                stor.push_back(1);
            }
            while (item>0){
                int f=item/pow(2,digit);
                item-=f*pow(2,digit);
                if (item==0) stor.push_back(f);
                else stor.push_back(f+1);
                digit--;
            }
            for (unsigned int i=0;i<digit+1;i++){
                stor.push_back(2);
            }
            for (unsigned int i=0;i<stor.size();i++){
                cout<<stor[i]<<" ";
            }
            cout<<endl;
        }
        string res="";
        res+=('a'+stor[0]-1);
        for (unsigned int i=1;i<stor.size();i++){
            switch (res[i-1]){
                case 'a': if (stor[i]==1) res+='b';
                    else res+='c'; break;
                case 'b': if (stor[i]==1) res+='a';
                    else res+='c'; break;
                case 'c': if (stor[i]==1) res+='a';
                    else res+='b'; break;
                default:break;
            }
        }
        return res;
    }
};
