给定集合{1,2,...n}，找出所有子集，使得每个子集中如果X存在，2X和3X不存在

算法（DP）
建立n*n数组，计算必定包含N的所有集合中，包含某个元素t的集合个数

F(n)为给定n的所有可能的子集个数， 则必定包含N的所有集合个数为F(n)-F(n-1)，计为f(n)，则如果n/2和n/3都不存在，则F(n)=2F(n-1)

第i行第j列表示必定包含i的集合中，包含元素j的集合个数表示为(i,j),其中i>=j

分情况讨论: i/2和i/3都不存在，则(i,j)=(j,j)+(j+1,j)+...+(i-1,j)
i/2存在,i/3不存在，则(i,j)=[(j,j)-(j,i/2)]+[(j+1,j)-(j+1,i/2)]+...+[(i-1,j)-(i-1,i/2)]
i/3存在,i/2不存在，则(i,j)=[(j,j)-(j,i/3)]+[(j+1,j)-(j+1,i/3)]+...+[(i-1,j)-(i-1,i/3)]
i/2和i/3斗尊在，则(i,j)=以下每一项相加
        (k,j)=(k,j)-(k,i/2并i/3)=(k,j)-(k,i/2)-(k,i/3)+(k,i/2交i/3)
        其中k=j,j+1...i-1
        (k,i/2交i/3)的计算方法为:如果k,i/2和i/3共存，则(k,i/2交i/3)=min( (k,i/2), (k,i/3) )
        

   1.  2.  3.  4.  5.  6
1

2

3

4

5

6
