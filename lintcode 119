class Solution {
public:
    /**
     * @param word1: A string
     * @param word2: A string
     * @return: The minimum number of steps.
     */
     //w1,w2长度一样
     unordered_map<int,int> same_len;
     int diff(string w1,string w2){
         int count=0;
         for (unsigned int i=0;i<w1.length();i++){
             if (w1[i]!=w2[i]){
                 count++;
             }
         }
         return count;
     }
     int helper(string  w1, string  w2){
         if (w2=="") return 0;
         if (w1.length()==w2.length()){
              unordered_map<int,int>::iterator itr=same_len.find(w2.length());
              return itr->second;
         }
         if (w1[0]==w2[0]) return helper(w1.substr(1),w2.substr(1));
         return min(helper(w1.substr(1),w2),1+helper(w1.substr(1),w2.substr(1)));
     }
     //计算最少多少步能把word1转换成顺序包含word2的词 (word1长度大于word2)
    int minDistance(string &word1, string &word2) {
        // write your code here
        if (word1.length()<word2.length()){
            string tmp=word1;
            word1=word2;
            word2=tmp;
        }
        for (int i=0;i<word2.length();i++){
            same_len[word2.length()-i]=(diff(word1.substr(word1.length()-word2.length()+i),word2.substr(i)));
        }
        for (unordered_map<int,int>::iterator itr=same_len.begin();itr!=same_len.end();itr++){
            cout<<itr->first<<" "<<itr->second<<endl;
        }
        return helper(word1,word2)+word1.length()-word2.length();
        
        
    }
};
