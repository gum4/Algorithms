/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    ListNode* sortList(ListNode* &h, ListNode* &t){
        ListNode* res;
        if (!h) return t;
        if (!t) return h;
        if (h->val<t->val){
            res=h;
            res->next=sortList(h->next,t);
        }
        else{
            res=t;
            res->next=sortList(h,t->next);
        }
        return res;
    } 
    // void printList(ListNode* tnode) 
    // { 
    // 	while (tnode != NULL) { 
    // 		cout << tnode->val << " "; 
    // 		tnode = tnode->next; 
    // 	} 
    // 	cout<<endl;
    // } 
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // write your code here
        if (lists.size()==0) return NULL;
        if (lists.size()==1) {
            if (lists[0]==NULL) return NULL;
            ListNode* tmp1=lists[0];
            
            ListNode* tmp2=lists[0]->next;
            tmp1->next=NULL;
            return sortList(tmp1,tmp2);
        }
        ListNode* RES;
        RES=sortList(lists[0],lists[1]);
        for (unsigned int i=2;i<lists.size();i++){
            RES=sortList(RES,lists[i]);
        }
        //printList(RES);
        return RES;
    }
};
