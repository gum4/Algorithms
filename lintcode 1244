class Solution {
public:
    /**
     * @param start: 
     * @param end: 
     * @param bank: 
     * @return: the minimum number of mutations needed to mutate from "start" to "end"
     */
    int minMutation(string &start, string &end, vector<string> &bank) {
        // Write your code here
        
        unordered_set<string> S;
        for (int i=0;i<bank.size();++i){
            S.insert(bank[i]);
        }
        string stor="ACGT";
        queue<string> Q;
        Q.push(start);
        int res=0;
        while (!Q.empty()){
            for (int i=Q.size()-1;i>=0;--i){
                string cur=Q.front();
                Q.pop();
                if (cur==end) return res;
                
                for (int j=0;j<cur.length();++j){
                    for (int k=0;k<stor.length();++k){
                        string tmp=cur;
                        if (tmp[j]==stor[k]) continue;
                        tmp[j]=stor[k];
                        if (S.count(tmp)==0) continue;
                        S.erase(tmp);
                        Q.push(tmp);
                    }
                }
                
            }
            ++res;
        }
        return -1;
    }
};
