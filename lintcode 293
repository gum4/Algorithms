class Solution {
public:
    /**
     * @param matrix: the matrix in problem
     * @return: the depth of the tunnel.
     */
     
    
    void helper(vector<vector<int>> &matrix, int i, int j, int & MAX){
        matrix[i][j]=0;
        MAX=max(MAX,i);
        //cout<<MAX<<endl;
        if (i+1<matrix.size()){
            if (matrix[i+1][j]==1){
                helper(matrix,i+1,j,MAX);
            }
        }
        if (i-1>=0){
            if (matrix[i-1][j]==1){
                helper(matrix,i-1,j,MAX);
            }
        }
        if (j+1<matrix[0].size()){
            if (matrix[i][j+1]==1){
                helper(matrix,i,j+1,MAX);
            }
        }
        if (i-1>=0){
            if (matrix[i][j-1]==1){
                helper(matrix,i,j-1,MAX);
            }
        }
        matrix[i][j]=1;
    }
    int FindDepth(vector<vector<int>> &matrix) {
        // 
        // int MAX;
        // for (int i=0;i<matrix.size();i++){
        //     for (int j=0;j<matrix[i].size();j++){
        //         if (matrix[i][j]==1){
        //             MAX=i;
        //             helper(matrix,i,j,MAX);
        //             return MAX;
        //         }
        //     }
        // }
        // return 0;
        int MAX=0;
        int i=0,j=0;
        while (0<=i&&i<matrix.size()&&0<=j&&j<matrix[i].size()){
            //cout<<i<<" "<<j<<endl; 
            if (matrix[i][j]==1){
                matrix[i][j]=0;
                MAX=max(MAX,i);
                int count=0;
                if (i-1>=0&&matrix[i-1][j]==1){
                    i--;
                    continue;
                }
                if (j-1>=0&&matrix[i][j-1]==1) {
                    j--;
                    continue;
                }
                if (i+1<matrix.size()&&matrix[i+1][j]==1) {
                    i++;
                    continue;
                }
                if (j+1<matrix[i].size()&&matrix[i][j+1]==1) {
                    j++;
                    continue;
                }
                break;
            }
        }
        return MAX;
    }
};
